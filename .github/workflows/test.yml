name: Test Release

on:
  push:
    branches: [ "master" ]

jobs:
  generate_assets:
    # Generates assets to be included in the release
    name: Gelease assets
    runs-on: ${{ matrix.config.os }} # we run many different builds
    strategy:
      # just an example matrix
      max-parallel: 2
      matrix:
        config:
          - os: ubuntu-latest
          # - os: macos-latest
          # - os: windows-latest
    steps:
      # checkout of cource
      - name: Checkout code
        uses: actions/checkout@v3
      # ... whatever build and packaging steps you need here
      - name: Zip assets
        # TODO: use real assets instead of test.bat, this is just used for testing
        run: zip iconic-deps-${{ matrix.config.os }}.zip test.bat
      # and finally do an upload! Saves the artifact to be used in the release
      - name: Upload atrifacts
        uses: actions/upload-artifact@v3
        with:
          # name: iconic-deps-${{ matrix.config.os }}.zip  # defaults to atrifact
          path: iconic-deps-${{ matrix.config.os }}.zip
          if-no-files-found: error
          
      - name: Zip assets pt2
        # TODO: use real assets instead of test.bat, this is just used for testing
        run: zip iconic-deps-${{ matrix.config.os }}2.zip test.bat
      # and finally do an upload! Saves the artifact to be used in the release
      - name: Upload atrifacts pt2
        uses: actions/upload-artifact@v3
        with:
          # name: iconic-deps-${{ matrix.config.os }}.zip  # defaults to atrifact
          path: iconic-deps-${{ matrix.config.os }}2.zip
          if-no-files-found: error 

  create_release:
    name: Create release
    needs: generate_assets
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get json parser
        run: npm install -g json
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          path: ./downloaded-artifacts
      - name: Create release
        run: |
          curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ github.token }}" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ github.ref_name }}-${{ github.run_number }}","draft":false,"prerelease":false,"generate_release_notes":false}' \
          | json assets_url | sed 's/api/uploads/' > uploads-url.txt
      - name: List assets
        run: |
          ls ${{ steps.download.outputs.download-path }} \
          | xargs -I % sh -e -c " \
              du -ha '${{ steps.download.outputs.download-path }}/%' \
              "

      - name: Upload artifacts to release
        run: |
          ls ${{ steps.download.outputs.download-path }}/artifact \
          | xargs -I % sh -e -c " \
              curl -v \
              -X POST \
              -H 'Accept: application/vnd.github+json' \
              -H 'Authorization: Bearer ${{ github.token }}' \
              -H 'Content-Type: application/zip' \
              --data-binary '@${{ steps.download.outputs.download-path }}/artifact/%' \
              '$(cat uploads-url.txt)?name=%' \
              "
