name: Test Release

on:
  push:
    branches: [ "master" ]

jobs:
  generate_assets:
    name: Gelease assets
    runs-on: ${{ matrix.config.os }} # we run many different builds
    strategy:
      # just an example matrix
      max-parallel: 2
      matrix:
        config:
          - os: ubuntu-latest
          - os: macos-latest
          # - os: windows-latest
    steps:
      # checkout of cource
      - name: Checkout code
        uses: actions/checkout@v3
      # ... whatever build and packaging steps you need here
      - name: Zip assets
        # uses: softprops/action-gh-release@v1
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: zip test.zip test.bat
      # and finally do an upload!
      - name: Upload atrifacts
        uses: actions/upload-artifact@v3
        with:
          name: iconic-deps-${{ matrix.config.os }}.zip
          path: test.zip

  create_release:
    name: Create release
    needs: generate_assets
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get json parser
        run: npm install -g json
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      # - name: Create release
      #   id: create_release
      #   uses: softprops/action-gh-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref_name }}-${{ github.run_number }}
      #     name: Release ${{ github.sha }}
      #     draft: false
      #     prerelease: false
      #     files: ${{ steps.download.outputs.download-path }}/*
      # # This is only needed currently because files in ^ is broken
      # - name: list ${{ github.workspace }}
      #   run: ls -la ${{ github.workspace }}
      # - name: list ${{ steps.download.outputs.download-path }}
      #   run: ls -la ${{ steps.download.outputs.download-path }}
      # - name: Upload artifact ubuntu-latest
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     # asset_path: ${{ steps.download.outputs.download-path }}/iconic-deps-ubuntu-latest.zip
      #     asset_path: ${{ github.workspace }}/test.bat
      #     asset_name: iconic-deps-ubuntu-latest.zip
      #     asset_content_type: application/octet-stream
      # - name: Upload artifact macos-latest
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     # asset_path: ${{ steps.download.outputs.download-path }}/iconic-deps-macos-latest.zip
      #     asset_path: ${{ github.workspace }}/test.bat
      #     asset_name: iconic-deps-macos-latest.zip
      #     asset_content_type: application/octet-stream
      - name: Create release
        run: |
          curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ github.token }}" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ github.ref_name }}-${{ github.run_number }}","draft":false,"prerelease":false,"generate_release_notes":false}' \
          | json assets_url | sed 's/api/uploads/' > uploads-url.txt
      - name: Upload artifacts to release
        run: |
          ls ${{ steps.download.outputs.download-path }} \
          | xargs -I % sh -c " \
              curl \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              -H "Content-Type": "application/zip" \
              --upload-file '${{ steps.download.outputs.download-path }}/%'
              $(cat uploads-url.txt)?name=% \
              "
